{"uid":"c96539e3a15e580a","name":"Update Quantity of an Item in the Cart","fullName":"suits.test_orderflows.test_cash.test_openorder_cash.TestOpenOrderCash#test_updating_item","historyId":"008f632ccc3183ccf9844d0a14bede4e","time":{"start":1741861622690,"stop":1741861633235,"duration":10545},"description":"Ensures the quantity of an existing item can be updated successfully.","descriptionHtml":"<p>Ensures the quantity of an existing item can be updated successfully.</p>\n","status":"failed","statusMessage":"AssertionError: assert 'Error is Message: \\n' == True\n +  where 'Error is Message: \\n' = update_item_quantity()\n +    where update_item_quantity = <logic.takeout_logic.Calculations object at 0x000001F1CF227430>.update_item_quantity\n +      where <logic.takeout_logic.Calculations object at 0x000001F1CF227430> = <test_cash.test_openorder_cash.TestOpenOrderCash object at 0x000001F1CF1639A0>.calc","statusTrace":"self = <test_cash.test_openorder_cash.TestOpenOrderCash object at 0x000001F1CF1639A0>\n\n    @allure.story(\"Item Quantity Management\")\n    @allure.title(\"Update Quantity of an Item in the Cart\")\n    @allure.description(\"Ensures the quantity of an existing item can be updated successfully.\")\n    def test_updating_item(self):\n>       assert self.calc.update_item_quantity() == True\nE       AssertionError: assert 'Error is Message: \\n' == True\nE        +  where 'Error is Message: \\n' = update_item_quantity()\nE        +    where update_item_quantity = <logic.takeout_logic.Calculations object at 0x000001F1CF227430>.update_item_quantity\nE        +      where <logic.takeout_logic.Calculations object at 0x000001F1CF227430> = <test_cash.test_openorder_cash.TestOpenOrderCash object at 0x000001F1CF1639A0>.calc\n\nsuits\\test_orderflows\\test_cash\\test_openorder_cash.py:56: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_once","time":{"start":1741861558110,"stop":1741861559654,"duration":1544},"status":"passed","steps":[{"name":"Performing User Login","time":{"start":1741861558260,"stop":1741861559223,"duration":963},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"Entering Passcode","time":{"start":1741861559224,"stop":1741861559651,"duration":427},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"eca07e65ee35f154","name":"Login Info","source":"eca07e65ee35f154.txt","type":"text/plain","size":54}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true,"attachmentStep":false,"stepsCount":2},{"name":"capture_screenshot_on_failure","time":{"start":1741861622546,"stop":1741861622546,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"setup_driver","time":{"start":1741861622546,"stop":1741861622689,"duration":143},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[{"name":"capture_screenshot_on_failure::0","time":{"start":1741861638374,"stop":1741861638922,"duration":548},"status":"broken","statusMessage":"KeyboardInterrupt\n","statusTrace":"  File \"C:\\Users\\rutwik\\miniconda3\\envs\\automation\\lib\\site-packages\\allure_commons\\_allure.py\", line 221, in __call__\n    return self._fixture_function(*args, **kwargs)\n  File \"C:\\Users\\rutwik\\miniconda3\\envs\\automation\\lib\\site-packages\\_pytest\\fixtures.py\", line 907, in _teardown_yield_fixture\n    next(it)\n  File \"C:\\Users\\rutwik\\Automation\\conftest.py\", line 126, in capture_screenshot_on_failure\n    appium_driver.get_screenshot_as_file(screenshot_path)  # Take screenshot\n  File \"C:\\Users\\rutwik\\miniconda3\\envs\\automation\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 969, in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n  File \"C:\\Users\\rutwik\\miniconda3\\envs\\automation\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1003, in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n  File \"C:\\Users\\rutwik\\miniconda3\\envs\\automation\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1013, in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n  File \"C:\\Users\\rutwik\\miniconda3\\envs\\automation\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 427, in execute\n    response = self.command_executor.execute(driver_command, params)\n  File \"C:\\Users\\rutwik\\miniconda3\\envs\\automation\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py\", line 404, in execute\n    return self._request(command_info[0], url, body=data)\n  File \"C:\\Users\\rutwik\\miniconda3\\envs\\automation\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py\", line 428, in _request\n    response = self._conn.request(method, url, body=body, headers=headers, timeout=self._client_config.timeout)\n  File \"C:\\Users\\rutwik\\miniconda3\\envs\\automation\\lib\\site-packages\\urllib3\\_request_methods.py\", line 135, in request\n    return self.request_encode_url(\n  File \"C:\\Users\\rutwik\\miniconda3\\envs\\automation\\lib\\site-packages\\urllib3\\_request_methods.py\", line 182, in request_encode_url\n    return self.urlopen(method, url, **extra_kw)\n  File \"C:\\Users\\rutwik\\miniconda3\\envs\\automation\\lib\\site-packages\\urllib3\\poolmanager.py\", line 443, in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\n  File \"C:\\Users\\rutwik\\miniconda3\\envs\\automation\\lib\\site-packages\\urllib3\\connectionpool.py\", line 787, in urlopen\n    response = self._make_request(\n  File \"C:\\Users\\rutwik\\miniconda3\\envs\\automation\\lib\\site-packages\\urllib3\\connectionpool.py\", line 534, in _make_request\n    response = conn.getresponse()\n  File \"C:\\Users\\rutwik\\miniconda3\\envs\\automation\\lib\\site-packages\\urllib3\\connection.py\", line 516, in getresponse\n    httplib_response = super().getresponse()\n  File \"C:\\Users\\rutwik\\miniconda3\\envs\\automation\\lib\\http\\client.py\", line 1375, in getresponse\n    response.begin()\n  File \"C:\\Users\\rutwik\\miniconda3\\envs\\automation\\lib\\http\\client.py\", line 318, in begin\n    version, status, reason = self._read_status()\n  File \"C:\\Users\\rutwik\\miniconda3\\envs\\automation\\lib\\http\\client.py\", line 279, in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n  File \"C:\\Users\\rutwik\\miniconda3\\envs\\automation\\lib\\socket.py\", line 717, in readinto\n    return self._sock.recv_into(b)\n","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"story","value":"Item Quantity Management"},{"name":"Type","value":"Functional Test"},{"name":"Module","value":"Order Management"},{"name":"feature","value":"Open Order Flow - Cash Payment"},{"name":"parentSuite","value":"suits.test_orderflows.test_cash"},{"name":"suite","value":"test_openorder_cash"},{"name":"subSuite","value":"TestOpenOrderCash"},{"name":"host","value":"LAPTOP-KKMKONCC"},{"name":"thread","value":"11296-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"suits.test_orderflows.test_cash.test_openorder_cash"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"c96539e3a15e580a.json","parameterValues":[]}