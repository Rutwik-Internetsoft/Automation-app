{"uid":"510d5920cf38a8e8","name":"Select Takeout Order","fullName":"suits.test_orderflows.test_cash.test_takeout_cash.TestTakeoutFlow#test_take_out_btn","historyId":"1bbf2d31ea69aa75b953f1bf8ea58646","time":{"start":1741711449311,"stop":1741711449311,"duration":0},"status":"broken","statusMessage":"FileNotFoundError: [WinError 2] The system cannot find the file specified","statusTrace":"@pytest.fixture(scope=\"session\", autouse=True)\n    def appium_session():\n        \"\"\"Start Appium server before tests & stop it after tests.\"\"\"\n>       appium_process = subprocess.Popen([\"appium\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n\nconftest.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\miniconda3\\Lib\\subprocess.py:1026: in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Popen: returncode: None args: ['appium']>, args = 'appium'\nexecutable = None, preexec_fn = None, close_fds = False, pass_fds = ()\ncwd = None, env = None\nstartupinfo = <subprocess.STARTUPINFO object at 0x00000270E3E6DC40>\ncreationflags = 0, shell = False, p2cread = Handle(1124), p2cwrite = -1\nc2pread = 6, c2pwrite = Handle(1140), errread = 7, errwrite = Handle(940)\nunused_restore_signals = True, unused_gid = None, unused_gids = None\nunused_uid = None, unused_umask = -1, unused_start_new_session = False\nunused_process_group = -1\n\n    def _execute_child(self, args, executable, preexec_fn, close_fds,\n                       pass_fds, cwd, env,\n                       startupinfo, creationflags, shell,\n                       p2cread, p2cwrite,\n                       c2pread, c2pwrite,\n                       errread, errwrite,\n                       unused_restore_signals,\n                       unused_gid, unused_gids, unused_uid,\n                       unused_umask,\n                       unused_start_new_session, unused_process_group):\n        \"\"\"Execute program (MS Windows version)\"\"\"\n    \n        assert not pass_fds, \"pass_fds not supported on Windows.\"\n    \n        if isinstance(args, str):\n            pass\n        elif isinstance(args, bytes):\n            if shell:\n                raise TypeError('bytes args is not allowed on Windows')\n            args = list2cmdline([args])\n        elif isinstance(args, os.PathLike):\n            if shell:\n                raise TypeError('path-like args is not allowed when '\n                                'shell is true')\n            args = list2cmdline([args])\n        else:\n            args = list2cmdline(args)\n    \n        if executable is not None:\n            executable = os.fsdecode(executable)\n    \n        # Process startup details\n        if startupinfo is None:\n            startupinfo = STARTUPINFO()\n        else:\n            # bpo-34044: Copy STARTUPINFO since it is modified above,\n            # so the caller can reuse it multiple times.\n            startupinfo = startupinfo.copy()\n    \n        use_std_handles = -1 not in (p2cread, c2pwrite, errwrite)\n        if use_std_handles:\n            startupinfo.dwFlags |= _winapi.STARTF_USESTDHANDLES\n            startupinfo.hStdInput = p2cread\n            startupinfo.hStdOutput = c2pwrite\n            startupinfo.hStdError = errwrite\n    \n        attribute_list = startupinfo.lpAttributeList\n        have_handle_list = bool(attribute_list and\n                                \"handle_list\" in attribute_list and\n                                attribute_list[\"handle_list\"])\n    \n        # If we were given an handle_list or need to create one\n        if have_handle_list or (use_std_handles and close_fds):\n            if attribute_list is None:\n                attribute_list = startupinfo.lpAttributeList = {}\n            handle_list = attribute_list[\"handle_list\"] = \\\n                list(attribute_list.get(\"handle_list\", []))\n    \n            if use_std_handles:\n                handle_list += [int(p2cread), int(c2pwrite), int(errwrite)]\n    \n            handle_list[:] = self._filter_handle_list(handle_list)\n    \n            if handle_list:\n                if not close_fds:\n                    warnings.warn(\"startupinfo.lpAttributeList['handle_list'] \"\n                                  \"overriding close_fds\", RuntimeWarning)\n    \n                # When using the handle_list we always request to inherit\n                # handles but the only handles that will be inherited are\n                # the ones in the handle_list\n                close_fds = False\n    \n        if shell:\n            startupinfo.dwFlags |= _winapi.STARTF_USESHOWWINDOW\n            startupinfo.wShowWindow = _winapi.SW_HIDE\n            if not executable:\n                # gh-101283: without a fully-qualified path, before Windows\n                # checks the system directories, it first looks in the\n                # application directory, and also the current directory if\n                # NeedCurrentDirectoryForExePathW(ExeName) is true, so try\n                # to avoid executing unqualified \"cmd.exe\".\n                comspec = os.environ.get('ComSpec')\n                if not comspec:\n                    system_root = os.environ.get('SystemRoot', '')\n                    comspec = os.path.join(system_root, 'System32', 'cmd.exe')\n                    if not os.path.isabs(comspec):\n                        raise FileNotFoundError('shell not found: neither %ComSpec% nor %SystemRoot% is set')\n                if os.path.isabs(comspec):\n                    executable = comspec\n            else:\n                comspec = executable\n    \n            args = '{} /c \"{}\"'.format (comspec, args)\n    \n        if cwd is not None:\n            cwd = os.fsdecode(cwd)\n    \n        sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n    \n        # Start the process\n        try:\n>           hp, ht, pid, tid = _winapi.CreateProcess(executable, args,\n                                     # no special security\n                                     None, None,\n                                     int(not close_fds),\n                                     creationflags,\n                                     env,\n                                     cwd,\n                                     startupinfo)\nE                                    FileNotFoundError: [WinError 2] The system cannot find the file specified\n\n..\\miniconda3\\Lib\\subprocess.py:1538: FileNotFoundError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"appium_session","time":{"start":1741711449314,"stop":1741711449315,"duration":1},"status":"broken","statusMessage":"FileNotFoundError: [WinError 2] The system cannot find the file specified\n","statusTrace":"  File \"C:\\Users\\rutwik\\miniconda3\\Lib\\site-packages\\pluggy\\_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"C:\\Users\\rutwik\\miniconda3\\Lib\\site-packages\\_pytest\\setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"C:\\Users\\rutwik\\miniconda3\\Lib\\site-packages\\pluggy\\_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\rutwik\\miniconda3\\Lib\\site-packages\\_pytest\\fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\rutwik\\miniconda3\\Lib\\site-packages\\_pytest\\fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"C:\\Users\\rutwik\\Automation\\conftest.py\", line 115, in appium_session\n    appium_process = subprocess.Popen([\"appium\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\rutwik\\miniconda3\\Lib\\subprocess.py\", line 1026, in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n  File \"C:\\Users\\rutwik\\miniconda3\\Lib\\subprocess.py\", line 1538, in _execute_child\n    hp, ht, pid, tid = _winapi.CreateProcess(executable, args,\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"feature","value":"Takeout Order Flow"},{"name":"story","value":"Order Management"},{"name":"parentSuite","value":"suits.test_orderflows.test_cash"},{"name":"suite","value":"test_takeout_cash"},{"name":"subSuite","value":"TestTakeoutFlow"},{"name":"host","value":"LAPTOP-KKMKONCC"},{"name":"thread","value":"49392-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"suits.test_orderflows.test_cash.test_takeout_cash"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"510d5920cf38a8e8.json","parameterValues":[]}