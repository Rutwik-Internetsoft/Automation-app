{
    "__init__": "This is the constructor method for the class. It initializes the instance with the path to the YAML file containing the locators (`locator_file`) and the default section name (`default_section`, defaulting to 'common'). The method then calls `load_locators()` to load the locator data into the instance, making the locators available for use within the class. The `locator_file` is essential for reading locator definitions, while `default_section` is used to define which section to default to when retrieving locators.",
    
    "load_locators": "This method is responsible for loading locator definitions from a YAML file. It opens the specified locator file (`self.locator_file`) and reads the contents using the `yaml.safe_load()` method. If the file is successfully loaded, it returns the locator data as a dictionary. In case of errors, such as invalid YAML format or missing file, it catches the exceptions (`yaml.YAMLError`, `FileNotFoundError`) and prints the respective error messages, returning an empty dictionary in such cases.",

    "get_locator": "This method retrieves a specific locator based on the provided key. The `section` argument is optional and defaults to the pre-configured `default_section`. If the key is missing from the given section, the method falls back to the default section. If the locator string requires formatting, the method accepts additional keyword arguments (`kwargs`) to format the locator string. The method returns the appropriate locator strategy (e.g., `ID`, `XPATH`, etc.) and the locator string itself. If the locator is not found, it raises a `ValueError` with a detailed error message indicating which section and key were not found.",

    "calculations_locators": "This method retrieves and stores all locators related to calculations by calling `get_locator` from the `locator_loader`. It loads locators such as buttons, fields, and options related to refunds, orders, tips, discounts, tax, surcharge, and payment amounts. These locators are stored as instance variables, making them available for use throughout the class for interaction with the user interface elements during testing or automation. The `get_locator` method is invoked with the 'calculations' section to ensure the locators are fetched from the appropriate section of the locator data.",

    "common_locators": "This method stores and retrieves locators related to common UI elements used throughout the application. It fetches locators such as buttons, input fields, and other interface components that appear on multiple pages or sections. The `get_locator` method is called with the 'common' section to load locators like setup buttons, customer fields, payment options, and navigation buttons. These locators are stored as instance variables for later use in automation or testing, allowing interaction with commonly used UI elements across various parts of the application.",

    "login_page_locators": "This method stores and retrieves locators specifically for the login page UI elements. It loads locators such as the username field, password field, login button, passcode field, and navigation elements necessary for automating or testing the login process. The `get_locator` method is used with the 'login_page' section to fetch these locators. By storing these locators as instance variables, the method ensures easy access to login page elements for performing interactions during automated tests or workflow automation.",

    "loyality_locators": "This method stores and retrieves locators related to the loyalty program features in the application. It fetches locators for elements like phone fields, customer lists, loyalty points display, and checkboxes associated with loyalty options. The `get_locator` method is called with the 'loyality' section to load these locators, making them available for interactions with loyalty-related UI components during automation or testing.",

    "split_locators": "This method stores and retrieves locators related to the order splitting functionality. It loads locators for elements like the splitting button, options for splitting the order into two parts, and navigation buttons within the split flow. These locators are retrieved using the 'split' section of the locator data. By storing these locators, the method facilitates automating or testing order splitting features and navigation between steps in the split process."
,
    "dining": "This method stores and retrieves locators related to the dining functionalities in the application. It loads locators for various dining-related actions, including selecting table types (square, round), guest management (adding/removing guests), and interacting with floor plans. Additionally, locators for table merging, wastage management, and assigning customers are stored. The method uses the 'dining' section of the locator data to fetch elements, ensuring that dining-related UI components can be easily accessed for automation or testing, particularly in the context of managing tables, guests, and dining orders."
,
    "cash_log": "This method stores and retrieves locators related to the cash log functionality in the application. It fetches locators for elements like the cash log button, cash drawer amount, cash in amount, cash out amount, and change amount. These locators are essential for automating or testing features related to cash flow management, allowing interaction with UI components that display or modify cash log information."
,
    "set_up": "This method stores and retrieves locators related to the setup functionality in the application. It loads locators for various setup options, such as tips, taxes, discounts, and order notes. The method includes locators for adding new tips or taxes, configuring discounts, managing order notes, and deleting orders. These locators are crucial for automating or testing the setup processes, ensuring that all configuration options for tips, taxes, and discounts are easily accessible and testable."
}