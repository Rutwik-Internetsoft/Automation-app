{
    "__init__": "This is the constructor method for initializing the class instance. It takes an 'appium_driver' as an argument, which represents the Appium driver instance used for interacting with the mobile application. It sets up three different wait times using 'WebDriverWait': a standard wait time of 10 seconds, a long wait time of 30 seconds, and a short wait time of 2 seconds for faster element loading. The method also initializes variables to store various financial amounts (subtotal, discount, service charge, taxes, total, etc.) as floating point numbers. The 'Locators' class is instantiated and the methods 'calculations_locators' and 'common_locators' are called to load locators related to calculations and common elements, making the class ready for interaction with the UI.",

    "order": "This method is used to select the type of order based on the 'order_type' argument. It checks the type of order provided (e.g., 'Take Out', 'Dine In', 'Phone Order', etc.), and clicks the appropriate button element associated with that order type. If no order type is specified, it defaults to clicking the 'Take Out' button. The method waits for the button corresponding to the specified order type to be clickable and then performs the click action. If the order type does not match any known options, the method returns 'False'. In case of any exceptions during the process, the method returns an error message.",

    "sub_total": "This method retrieves and returns the subtotal amount displayed on the screen. It waits for the 'sub_total' element to be present, extracts its text, strips any spaces, and removes the dollar sign ('$') to convert it into a float. The subtotal value is stored in the 'subtotal' attribute, and a message with the subtotal value is printed for logging purposes. If any exception occurs during this process (e.g., element not found), it prints an error message and returns 'False'.",

    "discount": "This method extracts and returns the discount amount displayed on the screen as a float. It waits for the discount element to be present, then extracts the text value, removes the '-$' symbol, strips any leading or trailing spaces, and converts it to a float. The discount amount is stored in the 'disCount' attribute and printed for logging. If any exception occurs, it prints the error message and returns a default value of 0.0.",

    "tax_calculation": "This method retrieves and returns the tax value as a float. It waits for the tax element to appear, extracts its text, strips any spaces, removes the '$' symbol, and converts the value to a float. The calculated tax value is printed for logging. In case of any exception (e.g., the element not being found), the method prints the error message and returns an exception.",

    "service_charge": "This method calculates and returns the service charge amount displayed on the screen as a float. It waits for the service charge element to be clickable, extracts the text, removes the '$' symbol, and converts it to a float. The service charge is stored in the 'serviceCharge' attribute and printed for logging. If an error occurs during the process, it prints the error message and returns 'False'.",

    "surcharge_percentage": "This method extracts and returns the surcharge percentage as a float. It waits for the surcharge element to be present, extracts its text, and uses a regular expression to search for a percentage value (e.g., '10%'). If a match is found, it returns the surcharge as a float; otherwise, it returns 0.0. If any exception occurs, it prints the error message and returns 'False'.",

    "pay": "This method handles the payment process. It waits for the 'pay_button' element to appear, extracts the text from the button, strips it of the 'Pay $' text, and converts the value to a float. If a specific amount is provided as an argument, the method returns the amount, otherwise, it clicks the 'pay_button' to initiate the payment process. If any exception occurs, it prints the error message and returns an exception.",

    "surcharge_actual": "This method retrieves and returns the actual surcharge amount as a float. It waits for the 'surcharge_actual' element to be present, extracts its text, removes the '$' symbol, and converts it to a float. The surcharge amount is returned. If any exception occurs, the method prints the error message and returns an exception.",

    "total_calculation": "This method calculates the total amount by adding the subtotal, tax, and service charge values. It retrieves the subtotal using the 'sub_total()' method, the tax using the 'tax_calculation()' method, and the service charge using the 'service_charge()' method. The calculated total is returned.",

    "tip": "This method handles the process of applying a tip to the order. It first clicks the 'tip_button' to open the tip options. A random percentage option (10%, 20%, or 30%) is chosen from the available options. The corresponding tip option is then clicked, and the tip percentage is extracted as a float from the displayed text. Finally, the 'save_tip' button is clicked to confirm the tip. If any error occurs during this process, the method prints the error message and returns an exception.",
  
    "add_multiple_items": "This method adds a specified number of items to the order. If no specific number is provided, it randomly selects between 2 and 5 items. For each item to be added, the method first randomly selects a category from the available categories and clicks on it. Then, it randomly selects an item within that category and clicks it. If modifiers are present for the item, the method waits for them to appear and randomly selects two distinct modifiers to apply. Finally, it clicks the 'done' button to confirm the selection. If any errors occur during any of these steps (e.g., elements not found), the method skips to the next step. The method returns 'True' if items were successfully added, or an error message if an issue occurs.",

    "add_discount": "This method adds a discount to the order. It first waits for the 'discount_menu' to be present and clicks on it. Then, it waits for the 'add_discount' option to appear and clicks it. A random percentage option (10%, 20%, or 30%) is chosen, and the corresponding discount option is selected. Afterward, the method clicks the 'txtsave' button to apply the discount. If any errors occur during this process, the method returns an error message indicating the issue.",
    
    "add_note": "This method adds a note to the order. If the 'note_type' parameter is 'item_note', the method clicks on the 'add_item_note' option. Otherwise, it clicks the 'add_note' option. A random note is selected from the available notes, and the corresponding note is clicked. Finally, the 'txtsave' button is clicked to save the note. If any errors occur during this process, the method prints 'Cannot add Note' and returns None.",
    
    "transaction": "This method initiates a transaction and retrieves the transaction total. It first waits for the 'transaction_button' to be clickable and clicks it. If the 'cash_log' parameter is provided, it clicks the 'transaction_button' again and returns True. Otherwise, it waits for the transaction total amount to be displayed, extracts the value, and returns the absolute value of the total. If any errors occur during this process, the method returns 'False'.",

    "cash_itemwise_refund": "This method handles item-wise cash refunds. It first clicks on the 'Order Type' and 'Issue Refund' options to initiate the refund process. Then, it randomly selects an item to refund from the available list, records the item's amount, and clicks the 'Done' button. Afterward, the method verifies the refunded amount by checking the total refunded and paid amounts. If the amounts match (within a $0.30 tolerance), it returns True, indicating a successful refund. If any errors occur during the process, the method returns an error message.",
    
    "cash_refund": "This method processes a cash refund for a transaction. It clicks on the 'Transaction' button, selects an order, and initiates the refund by clicking on the 'Refund' button. The refund process involves clicking 'Done' and 'Save Refund'. The method then checks the refunded amount and compares it with the paid amount, ensuring they are within a $0.30 tolerance, including any tip amount. If the amounts match, it returns True, indicating a successful refund. If any errors occur, it returns an error message.",
    
    "card_refund": "This method processes a card refund for a transaction. Similar to the cash refund, it clicks on the 'Transaction' button, selects an order, and initiates the refund. The method clicks 'Save' and 'Save Refund' to complete the refund process. It then checks the refunded amount against the paid amount for consistency. If the amounts match exactly, it returns True, indicating the refund was successful. Any errors encountered will return an error message.",
    
    "isOrder": "This method checks if the current order type matches a given order type. It first attempts to retrieve the order type from the 'transaction_order_type' or 'current_order_type' element. If the order type matches the provided one, it returns True. If the order type is not provided, it returns False. If any errors occur during the process, the method returns an error message.",
    
    "connect_PAX": "This method handles connecting a PAX terminal. It clicks through the menu to the hardware section, where it checks if the PAX terminal is already connected. If it is, it returns True. If not, it attempts to connect the PAX terminal and save the connection. Once connected, it returns True. If any issues arise during this process, the method returns False.",
    
    "tear_down": "This method handles the logout process by clicking on the main menu, selecting the logout option, and confirming the logout action. Afterward, it waits for the login screen to appear, indicating a successful logout. If any errors occur, it prints 'Error' and does not return any value.",
    
    "cash_amount": "This method retrieves the cash amount displayed on the screen. It extracts the dollar value from the element using regex and returns the amount as a float. If an error occurs during this process, it prints the error message and returns an exception.",
    
    "card_amount": "This method retrieves the card payment amount displayed on the screen. It works similarly to the 'cash_amount' method by extracting the dollar value using regex and returning it as a float. Any errors during the process will result in an error message being printed and an exception being returned.",
    
    "cash_pay": "This method simulates a cash payment by clicking the cash payment button. It then attempts to click the payment home button. If successful, it returns True. If any errors occur during the payment process, an error message is printed, and the method returns False.",
    
    "card_pay": "This method simulates a card payment by clicking the credit card payment button. It then attempts to click the payment home button. If successful, it returns True. If any errors occur during the payment process, an error message is printed, and the method returns False.",
    
    "manual_item": "This method adds custom items to the cart. It first clicks on the keypad and enters a random food item from a predefined list. It then randomly selects modifiers from a list, adds them to the item, and clicks the 'Add' button. Finally, it saves the order. If any errors occur, the method returns the error message.",

    "update_item_quantity": "This method updates the quantity of an item in the cart. It selects a random item from the cart and clicks on it. Then, it randomly increments the item's quantity by clicking the '+' button several times. After adding notes, it confirms the update and retrieves the updated quantity. If any issues arise, the method returns the error message.",

    "adding_new_customer": "This method adds a new customer by randomly selecting a name, surname, phone number, and email. It fills in the customer details in the respective fields and saves the customer profile. After adding the customer, it confirms the creation by clicking the customer name in the list. If an error occurs, the method returns the error message.",

    "transaction_tip": "This method handles adding a tip to a transaction. It selects a transaction, then chooses a tip percentage from predefined options (10%, 20%, or 30%). After selecting the tip, it clicks 'Save' and 'Home'. The method returns the selected tip percentage. If an error occurs, the method returns the error message.",
    
    "phone_order": "This method creates a random phone order by generating a random name, surname, phone number, and email. It enters the generated details into the corresponding fields and clicks the 'Next' button. It then checks if the order type is 'Phone Order' and returns True if it matches, or False otherwise. In case of an error, it returns the error message.",
    
    "search_cust_order": "This method searches for an existing customer order. If no customer is found, it creates a new customer. It selects a random customer from the list and checks if the customer name matches the name displayed on the receipt. If the names match, it prints 'Test Passed' and returns True. If not, it returns False. Any exceptions are caught and returned as error messages.",
    
    "cash_payment": "This method processes a cash payment. It compares the amount to be paid with the cash amount entered. If the difference is less than or equal to $0.30, it proceeds with the cash payment and returns True. Otherwise, it returns False.",
    
    "card_payment": "This method processes a card payment. It compares the amount to be paid, including any surcharge, with the card amount entered. If the difference is less than or equal to $0.30, it proceeds with the card payment and returns True. Otherwise, it returns False.",
    
    "save_order": "This method saves an order, performs actions based on the provided 'process' parameter ('Pay', 'Update', or 'Cancel'), and interacts with various elements in the UI. It clicks the 'Save' button, then proceeds to handle the order process (payment, update, or cancellation). If no process is specified, it defaults to 'Pay'. Any exceptions are caught and returned as error messages.",
    
    "ord_upt": "This method updates the order based on the specified 'process' ('Pay', 'Update', or 'Cancel'). For 'Pay', it fetches the amount and proceeds with the payment. For 'Update', it updates the order by adding items, notes, and discounts. For 'Cancel', it selects a reason for cancellation and confirms the action. After updating or canceling, it checks for date consistency to ensure the action was completed successfully. Errors are returned as messages.",
    
    "remove_item": "This method removes an item from the cart. It selects a random item from the cart and clicks on it, then clicks the 'Remove' button to delete the item. If successful, it returns True. Any errors are caught and returned as error messages."
      
}